{"ast":null,"code":"import { auth } from \"../../firebaseConfig\";\nimport { AUTH_ERROR, GET_USER } from \"./type\";\n\nconst currentUser = dispatch => {\n  auth.onAuthStateChanged(user => {\n    if (user) {\n      dispatch({\n        type: GET_USER,\n        payload: user.providerData[0]\n      });\n    } else {\n      dispatch({\n        type: GET_USER,\n        payload: null\n      });\n      dispatch({\n        type: AUTH_ERROR,\n        payload: null\n      });\n    }\n  });\n};\n\nexport const getUser = () => dispatch => {\n  currentUser(dispatch);\n};\nexport const registerUser = userData => dispatch => {\n  const {\n    email,\n    password,\n    username\n  } = userData;\n  auth.createUserWithEmailAndPassword(email, password).then(userCredential => {\n    auth.currentUser.updateProfile({\n      displayName: username\n    });\n    dispatch({\n      type: AUTH_ERROR,\n      payload: {\n        msg: \"Register successfully completed\",\n        auth: true\n      }\n    });\n    currentUser(dispatch);\n  }).catch(error => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: {\n        msg: error.message,\n        auth: false\n      }\n    });\n  });\n};\nexport const loginUser = userData => dispatch => {\n  const {\n    email,\n    password\n  } = userData;\n  auth.signInWithEmailAndPassword(email, password).then(userCredential => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: {\n        msg: \"Login successfully completed\",\n        auth: true\n      }\n    });\n    currentUser(dispatch);\n  }).catch(error => {\n    dispatch({\n      type: AUTH_ERROR,\n      payload: {\n        msg: error.message,\n        auth: false\n      }\n    });\n  });\n};\nexport const logoutUser = () => dispatch => {\n  auth.signOut().then(() => {\n    currentUser(dispatch);\n  }).catch(error => {// An error happened.\n  });\n};","map":{"version":3,"sources":["D:/react-projects/uena/uena-final/package/src/redux/action/auth.js"],"names":["auth","AUTH_ERROR","GET_USER","currentUser","dispatch","onAuthStateChanged","user","type","payload","providerData","getUser","registerUser","userData","email","password","username","createUserWithEmailAndPassword","then","userCredential","updateProfile","displayName","msg","catch","error","message","loginUser","signInWithEmailAndPassword","logoutUser","signOut"],"mappings":"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","sourcesContent":["import { auth } from \"../../firebaseConfig\";\r\nimport { AUTH_ERROR, GET_USER } from \"./type\";\r\n\r\nconst currentUser = (dispatch) => {\r\n  auth.onAuthStateChanged((user) => {\r\n    if (user) {\r\n      dispatch({\r\n        type: GET_USER,\r\n        payload: user.providerData[0],\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: GET_USER,\r\n        payload: null,\r\n      });\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n        payload: null,\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nexport const getUser = () => (dispatch) => {\r\n  currentUser(dispatch);\r\n};\r\n\r\nexport const registerUser = (userData) => (dispatch) => {\r\n  const { email, password, username } = userData;\r\n  auth\r\n    .createUserWithEmailAndPassword(email, password)\r\n    .then((userCredential) => {\r\n      auth.currentUser.updateProfile({\r\n        displayName: username,\r\n      });\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n        payload: {\r\n          msg: \"Register successfully completed\",\r\n          auth: true,\r\n        },\r\n      });\r\n      currentUser(dispatch);\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n        payload: { msg: error.message, auth: false },\r\n      });\r\n    });\r\n};\r\n\r\nexport const loginUser = (userData) => (dispatch) => {\r\n  const { email, password } = userData;\r\n  auth\r\n    .signInWithEmailAndPassword(email, password)\r\n    .then((userCredential) => {\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n        payload: {\r\n          msg: \"Login successfully completed\",\r\n          auth: true,\r\n        },\r\n      });\r\n      currentUser(dispatch);\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n        payload: { msg: error.message, auth: false },\r\n      });\r\n    });\r\n};\r\n\r\nexport const logoutUser = () => (dispatch) => {\r\n  auth\r\n    .signOut()\r\n    .then(() => {\r\n      currentUser(dispatch);\r\n    })\r\n    .catch((error) => {\r\n      // An error happened.\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}