{"ast":null,"code":"import _slicedToArray from \"D:/react-projects/uena/uena-final/package/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\n// utils/useWindowSize.js\nimport React, { useEffect, useState } from \"react\";\nexport default function useWindowSize() {\n  _s();\n\n  var _useState = useState(null),\n      win = _useState[0],\n      setWin = _useState[1];\n\n  useEffect(function () {\n    setWin(window);\n  }, []);\n  var isSSR = true;\n\n  var _React$useState = React.useState({\n    width: isSSR ? 1200 : win && window.innerWidth,\n    height: isSSR ? 800 : win && window.innerHeight\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      windowSize = _React$useState2[0],\n      setWindowSize = _React$useState2[1];\n\n  function changeWindowSize() {\n    setWindowSize({\n      width: win && window.innerWidth,\n      height: win && window.innerHeight\n    });\n  }\n\n  React.useEffect(function () {\n    win && window.addEventListener(\"resize\", changeWindowSize);\n    return function () {\n      win && window.removeEventListener(\"resize\", changeWindowSize);\n    };\n  }, []);\n  return windowSize;\n}\n\n_s(useWindowSize, \"bnQA42d0FJKXvlLwMGBRI58i0aw=\");","map":{"version":3,"sources":["D:/react-projects/uena/uena-final/package/src/components/useWindowSize.js"],"names":["React","useEffect","useState","useWindowSize","win","setWin","window","isSSR","width","innerWidth","height","innerHeight","windowSize","setWindowSize","changeWindowSize","addEventListener","removeEventListener"],"mappings":";;;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AAAA,kBAChBD,QAAQ,CAAC,IAAD,CADQ;AAAA,MAC/BE,GAD+B;AAAA,MAC1BC,MAD0B;;AAEtCJ,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,MAAM,CAACC,MAAD,CAAN;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,MAAMC,KAAK,OAAX;;AALsC,wBAMFP,KAAK,CAACE,QAAN,CAAe;AACjDM,IAAAA,KAAK,EAAED,KAAK,GAAG,IAAH,GAAUH,GAAG,IAAIE,MAAM,CAACG,UADa;AAEjDC,IAAAA,MAAM,EAAEH,KAAK,GAAG,GAAH,GAASH,GAAG,IAAIE,MAAM,CAACK;AAFa,GAAf,CANE;AAAA;AAAA,MAM/BC,UAN+B;AAAA,MAMnBC,aANmB;;AAWtC,WAASC,gBAAT,GAA4B;AAC1BD,IAAAA,aAAa,CAAC;AACZL,MAAAA,KAAK,EAAEJ,GAAG,IAAIE,MAAM,CAACG,UADT;AAEZC,MAAAA,MAAM,EAAEN,GAAG,IAAIE,MAAM,CAACK;AAFV,KAAD,CAAb;AAID;;AAEDX,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpBG,IAAAA,GAAG,IAAIE,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCD,gBAAlC,CAAP;AAEA,WAAO,YAAM;AACXV,MAAAA,GAAG,IAAIE,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCF,gBAArC,CAAP;AACD,KAFD;AAGD,GAND,EAMG,EANH;AAQA,SAAOF,UAAP;AACD;;GA3BuBT,a","sourcesContent":["// utils/useWindowSize.js\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport default function useWindowSize() {\r\n  const [win, setWin] = useState(null);\r\n  useEffect(() => {\r\n    setWin(window);\r\n  }, []);\r\n  const isSSR = typeof window !== \"undefined\";\r\n  const [windowSize, setWindowSize] = React.useState({\r\n    width: isSSR ? 1200 : win && window.innerWidth,\r\n    height: isSSR ? 800 : win && window.innerHeight,\r\n  });\r\n\r\n  function changeWindowSize() {\r\n    setWindowSize({\r\n      width: win && window.innerWidth,\r\n      height: win && window.innerHeight,\r\n    });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    win && window.addEventListener(\"resize\", changeWindowSize);\r\n\r\n    return () => {\r\n      win && window.removeEventListener(\"resize\", changeWindowSize);\r\n    };\r\n  }, []);\r\n\r\n  return windowSize;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}