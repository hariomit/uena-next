{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_NOTE, ADD_USER, CHAT_BOX, CHAT_LISTS, DELETE_NOTE, EDIT_NOTE, MSG_BOX, NOTES, PAGE_TITLE, SEARCH_DATA, SEND_MSG } from \"../action/type\";\n\nconst utilsReducer = (state = [], action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case PAGE_TITLE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        pageTitle: payload\n      });\n\n    case CHAT_BOX:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatBox: payload\n      });\n\n    case CHAT_LISTS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatLists: payload\n      });\n\n    case MSG_BOX:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        msgBox: payload\n      });\n\n    case SEND_MSG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        msgBox: [...state.msgBox, payload]\n      });\n\n    case ADD_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatLists: [payload, ...state.chatLists]\n      });\n\n    case SEARCH_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchData: payload\n      });\n\n    case NOTES:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: payload\n      });\n\n    case ADD_NOTE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: [payload, ...state.notes]\n      });\n\n    case EDIT_NOTE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: state.notes.map((note, i) => i !== payload.id ? note : payload.note)\n      });\n\n    case DELETE_NOTE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: state.notes.filter((note, i) => i !== payload && note)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default utilsReducer;","map":{"version":3,"sources":["D:/react-projects/uena/uena-final/package/src/redux/reducer/utilsReducer.js"],"names":["ADD_NOTE","ADD_USER","CHAT_BOX","CHAT_LISTS","DELETE_NOTE","EDIT_NOTE","MSG_BOX","NOTES","PAGE_TITLE","SEARCH_DATA","SEND_MSG","utilsReducer","state","action","type","payload","pageTitle","chatBox","chatLists","msgBox","searchData","notes","map","note","i","id","filter"],"mappings":";;;;;;AAAA,SACEA,QADF,EAEEC,QAFF,EAGEC,QAHF,EAIEC,UAJF,EAKEC,WALF,EAMEC,SANF,EAOEC,OAPF,EAQEC,KARF,EASEC,UATF,EAUEC,WAVF,EAWEC,QAXF,QAYO,gBAZP;;AAcA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKN,UAAL;AACE,6CACKI,KADL;AAEEI,QAAAA,SAAS,EAAED;AAFb;;AAIF,SAAKb,QAAL;AACE,6CACKU,KADL;AAEEK,QAAAA,OAAO,EAAEF;AAFX;;AAIF,SAAKZ,UAAL;AACE,6CACKS,KADL;AAEEM,QAAAA,SAAS,EAAEH;AAFb;;AAIF,SAAKT,OAAL;AACE,6CACKM,KADL;AAEEO,QAAAA,MAAM,EAAEJ;AAFV;;AAIF,SAAKL,QAAL;AACE,6CACKE,KADL;AAEEO,QAAAA,MAAM,EAAE,CAAC,GAAGP,KAAK,CAACO,MAAV,EAAkBJ,OAAlB;AAFV;;AAIF,SAAKd,QAAL;AACE,6CACKW,KADL;AAEEM,QAAAA,SAAS,EAAE,CAACH,OAAD,EAAU,GAAGH,KAAK,CAACM,SAAnB;AAFb;;AAIF,SAAKT,WAAL;AACE,6CACKG,KADL;AAEEQ,QAAAA,UAAU,EAAEL;AAFd;;AAIF,SAAKR,KAAL;AACE,6CACKK,KADL;AAEES,QAAAA,KAAK,EAAEN;AAFT;;AAIF,SAAKf,QAAL;AACE,6CACKY,KADL;AAEES,QAAAA,KAAK,EAAE,CAACN,OAAD,EAAU,GAAGH,KAAK,CAACS,KAAnB;AAFT;;AAIF,SAAKhB,SAAL;AACE,6CACKO,KADL;AAEES,QAAAA,KAAK,EAAET,KAAK,CAACS,KAAN,CAAYC,GAAZ,CAAgB,CAACC,IAAD,EAAOC,CAAP,KACrBA,CAAC,KAAKT,OAAO,CAACU,EAAd,GAAmBF,IAAnB,GAA0BR,OAAO,CAACQ,IAD7B;AAFT;;AAOF,SAAKnB,WAAL;AACE,6CACKQ,KADL;AAEES,QAAAA,KAAK,EAAET,KAAK,CAACS,KAAN,CAAYK,MAAZ,CAAmB,CAACH,IAAD,EAAOC,CAAP,KAAaA,CAAC,KAAKT,OAAN,IAAiBQ,IAAjD;AAFT;;AAKF;AACE,aAAOX,KAAP;AA7DJ;AA+DD,CAjED;;AAkEA,eAAeD,YAAf","sourcesContent":["import {\r\n  ADD_NOTE,\r\n  ADD_USER,\r\n  CHAT_BOX,\r\n  CHAT_LISTS,\r\n  DELETE_NOTE,\r\n  EDIT_NOTE,\r\n  MSG_BOX,\r\n  NOTES,\r\n  PAGE_TITLE,\r\n  SEARCH_DATA,\r\n  SEND_MSG,\r\n} from \"../action/type\";\r\n\r\nconst utilsReducer = (state = [], action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case PAGE_TITLE:\r\n      return {\r\n        ...state,\r\n        pageTitle: payload,\r\n      };\r\n    case CHAT_BOX:\r\n      return {\r\n        ...state,\r\n        chatBox: payload,\r\n      };\r\n    case CHAT_LISTS:\r\n      return {\r\n        ...state,\r\n        chatLists: payload,\r\n      };\r\n    case MSG_BOX:\r\n      return {\r\n        ...state,\r\n        msgBox: payload,\r\n      };\r\n    case SEND_MSG:\r\n      return {\r\n        ...state,\r\n        msgBox: [...state.msgBox, payload],\r\n      };\r\n    case ADD_USER:\r\n      return {\r\n        ...state,\r\n        chatLists: [payload, ...state.chatLists],\r\n      };\r\n    case SEARCH_DATA:\r\n      return {\r\n        ...state,\r\n        searchData: payload,\r\n      };\r\n    case NOTES:\r\n      return {\r\n        ...state,\r\n        notes: payload,\r\n      };\r\n    case ADD_NOTE:\r\n      return {\r\n        ...state,\r\n        notes: [payload, ...state.notes],\r\n      };\r\n    case EDIT_NOTE:\r\n      return {\r\n        ...state,\r\n        notes: state.notes.map((note, i) =>\r\n          i !== payload.id ? note : payload.note\r\n        ),\r\n      };\r\n\r\n    case DELETE_NOTE:\r\n      return {\r\n        ...state,\r\n        notes: state.notes.filter((note, i) => i !== payload && note),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default utilsReducer;\r\n"]},"metadata":{},"sourceType":"module"}